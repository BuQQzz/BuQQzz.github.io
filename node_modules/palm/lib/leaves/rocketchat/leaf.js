'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _axe = require('../../lib/axe');

var _axe2 = _interopRequireDefault(_axe);

var _log = require('../../lib/log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RocketChat = function (_EventEmitter) {
	_inherits(RocketChat, _EventEmitter);

	function RocketChat(params) {
		_classCallCheck(this, RocketChat);

		var _this = _possibleConstructorReturn(this, (RocketChat.__proto__ || Object.getPrototypeOf(RocketChat)).call(this, params));

		_this.authOk = false;
		_this.headers = {};

		_this.axe = {};

		_this._preInit(params);
		return _this;
	}

	_createClass(RocketChat, [{
		key: 'init',
		value: function init() {
			var _this2 = this;

			setInterval(function () {
				if (_this2.authOk) {
					// ***** Example request *****
					// const data = {
					// 	channel: '#bot_test',
					// 	text: 'Test 2'
					// }
					// Post message to a chet
					// this.axe.post('/chat.postMessage', data, { headers: this.headers })
					// 	.then(res => {
					// 		console.log(res.data)
					// 	})
					// 	.catch(err => l.error(err))
					// Get RocketChat info
					// this.axe.get('/info', { headers: this.headers })
					// 	.then(res => {
					// 		console.log(res.data)
					// 	})
					// 	.catch(err => l.error(err))
					// ***** End example *****
				}
			}, 3000);
		}
	}, {
		key: '_preInit',
		value: function _preInit(params) {
			var _this3 = this;

			// Check params
			if (this._checkParams(params)) {
				this.axe = (0, _axe2.default)({
					baseURL: params.url
				});

				// Authenticate user
				this._auth({ user: params.user, password: params.password }).then(function (auth) {
					if (auth.status === 'success') {
						_log2.default.ok('Authentication successfull.');
						_this3.headers = {
							'X-Auth-Token': auth.data.authToken,
							'X-User-Id': auth.data.userId
						};
						_this3.authOk = true;
					} else {
						_log2.default.err('Authentication error.');
					}
				}).catch(function (err) {
					return _log2.default.err(err.message);
				});
			}
		}
	}, {
		key: '_auth',
		value: function _auth(_ref) {
			var user = _ref.user,
			    password = _ref.password;

			return this.axe.post('/login', { user: user, password: password }).then(function (res) {
				return res.data;
			}).catch(function (err) {
				return _log2.default.err(err.message);
			});
		}
	}, {
		key: '_checkParams',
		value: function _checkParams(params) {
			// TODO: add check here
			return true;
		}
	}]);

	return RocketChat;
}(_events.EventEmitter);

exports.default = RocketChat;
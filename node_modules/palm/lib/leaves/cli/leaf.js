'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

var _events = require('events');

var _log = require('../../lib/log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var rl = _readline2.default.createInterface({
	input: process.stdin,
	output: process.stdout,
	terminal: false
});

var Cli = function (_EventEmitter) {
	_inherits(Cli, _EventEmitter);

	function Cli() {
		_classCallCheck(this, Cli);

		return _possibleConstructorReturn(this, (Cli.__proto__ || Object.getPrototypeOf(Cli)).apply(this, arguments));
	}

	_createClass(Cli, [{
		key: 'init',
		value: function init() {
			this.get();
		}
	}, {
		key: 'get',
		value: function get() {
			var _this2 = this;

			rl.question('> ', function (message) {
				_this2.emit('message', message);
			});
		}
	}, {
		key: 'send',
		value: function send(_ref) {
			var text = _ref.text,
			    level = _ref.level;

			// if (!l[level]) {
			// 	l.ok(text)
			// } else {
			// 	l[level](text)
			// }

			_log2.default.ok(text);
			this.get();
		}
	}]);

	return Cli;
}(_events.EventEmitter);

exports.default = Cli;
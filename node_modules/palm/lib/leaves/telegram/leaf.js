'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _log = require('../../lib/log');

var _log2 = _interopRequireDefault(_log);

var _axe = require('../../lib/axe');

var _axe2 = _interopRequireDefault(_axe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// sendPhoto
// import FormData from 'form-data'
// import fs from 'fs'
// import concat from 'concat-stream'

var Telegram = function (_EventEmitter) {
	_inherits(Telegram, _EventEmitter);

	function Telegram(params) {
		_classCallCheck(this, Telegram);

		var _this = _possibleConstructorReturn(this, (Telegram.__proto__ || Object.getPrototypeOf(Telegram)).call(this, params));

		_this.parent = '';
		_this.axe = {};
		_this._offset = 0;

		if (_this._checkParams(params)) {
			_this.parent = params.parent;
			_this.axe = (0, _axe2.default)({
				baseURL: params.url + params.token
			});
		}
		return _this;
	}

	_createClass(Telegram, [{
		key: 'init',
		value: function init() {
			var _this2 = this;

			setInterval(function () {
				_this2.getNewMessages().then(function (msgs) {
					return _lodash2.default.forEach(msgs, function (msg) {
						_this2.emit('message', { to: msg.message.from.id, text: msg.message.text });
					});
				}).catch(function (err) {
					return _log2.default.err(err.message);
				});
			}, 3000);
		}
	}, {
		key: 'send',
		value: function send(_ref) {
			var to = _ref.to,
			    text = _ref.text;

			return this.axe.post('/sendMessage?chat_id=' + (to || this.parent) + '&text=' + text).then(function (res) {
				return res;
			}).catch(function (err) {
				return err;
			});
		}

		// sendPhoto ({ photo }) {
		// 	const promise = new Promise((resolve) => {
		// 		const fd = new FormData()
		// 		fd.append('photo', fs.createReadStream(photo))
		//
		// 		fd.pipe(concat({ encoding: 'buffer' }, data => resolve(data)))
		// 	})
		//
		// 	return promise
		// 		.then((data) => this.axe.post(`/sendPhoto&chat_id=${this.parent}`, data, { headers: { 'Content-Type': 'multipart/form-data' } }))
		// }

	}, {
		key: 'getNewMessages',
		value: function getNewMessages() {
			var _this3 = this;

			return this.axe.get('/getUpdates?offset=' + this._offset).then(function (res) {
				if (res.data.ok) {
					var messages = res.data.result;
					if (messages.length > 0) _this3._updateOffset(messages);
					return messages;
				}
				return _log2.default.err('Telegram response is not ok.');
			}).catch(function (err) {
				return _log2.default.err(err.message);
			});
		}
	}, {
		key: '_updateOffset',
		value: function _updateOffset(msgs) {
			var ids = _lodash2.default.map(msgs, function (msg) {
				return msg.update_id;
			});

			this._offset = Math.max.apply(null, ids) + 1;
		}
	}, {
		key: '_checkParams',
		value: function _checkParams(params) {
			if (params) {
				if (params.url) {
					_log2.default.ok('Telegram <url> is ok.');
				} else {
					_log2.default.err('Telegram <url> parameter not found.');
				}

				if (params.token) {
					_log2.default.ok('Telegram <token> is ok.');
				} else {
					_log2.default.err('Telegram <token> parameter is not found.');
				}

				if (params.parent) {
					_log2.default.ok('Telegram <parent> is ok.');
				} else {
					_log2.default.err('Telegram <parent> parameter is not found.');
				}
				return true;
			} else {
				_log2.default.error('Telegram params not found.');
				return false;
			}
		}
	}]);

	return Telegram;
}(_events.EventEmitter);

exports.default = Telegram;
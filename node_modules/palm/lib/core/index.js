'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _cocos = require('../cocos');

var _cocos2 = _interopRequireDefault(_cocos);

var _leaves = require('../leaves');

var _leaves2 = _interopRequireDefault(_leaves);

var _log = require('../lib/log');

var _log2 = _interopRequireDefault(_log);

var _package = require('../../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Palm = function () {
	function Palm(params) {
		_classCallCheck(this, Palm);

		this.cocos = _cocos2.default;
		this.leaf = params.talk;

		if (this.leaf === 'telegram') {
			this.telegram = new _leaves2.default.Telegram(params.telegram);
		} else if (this.leaf === 'cli') {
			this.cli = new _leaves2.default.Cli();
		} else if (this.leaf === 'rocketchat') {
			this.rocketchat = new _leaves2.default.RocketChat(params.rocketchat);
		}
	}

	_createClass(Palm, [{
		key: 'listen',
		value: function listen() {
			var _this = this;

			_log2.default.info('Initialized palm v' + _package2.default.version + ' via ' + this.leaf);

			this[this.leaf].init();

			this[this.leaf].on('message', function (_ref) {
				var to = _ref.to,
				    text = _ref.text;
				return _this.respond({ to: to, text: text });
			});
		}
	}, {
		key: 'send',
		value: function send(_ref2) {
			var to = _ref2.to,
			    text = _ref2.text;

			this[this.leaf].send({ to: to, text: text }).then(function () {}).catch(function (err) {
				return _log2.default.err(err.message);
			});
		}

		// sendPhoto ({ photo }) {
		// 	if (this[this.leaf].sendPhoto) {
		// 		this[this.leaf].sendPhoto({ photo })
		// 			.then(res => console.log(res))
		// 			.catch(err => console.error(err))
		// 	}
		// }

	}, {
		key: 'respond',
		value: function respond(_ref3) {
			var _this2 = this;

			var to = _ref3.to,
			    text = _ref3.text;

			var getCoco = this.initCoco(text);

			if (getCoco.ok) {
				getCoco.coco.exec(text, this[this.leaf]).then(function (text) {
					return _this2.send({ to: to, text: text });
				}).catch(function (err) {
					return _log2.default.err(err.message);
				});
			} else {
				this.cocos.idk.exec().then(function (text) {
					return _this2.send({ to: to, text: text });
				}).catch(function (err) {
					return _log2.default.err(err.message);
				});
			}
		}
	}, {
		key: 'initCoco',
		value: function initCoco(text) {
			var _this3 = this;

			var a = { ok: false };

			var _loop = function _loop(key) {
				_lodash2.default.forEach(_this3.cocos[key].keywords, function (keyword) {
					if (text.match(new RegExp(keyword, 'i'))) {
						a.ok = true;
						a.coco = _this3.cocos[key];
					}
				});
			};

			for (var key in this.cocos) {
				_loop(key);
			}

			return a;
		}
	}, {
		key: 'addCoco',
		value: function addCoco(coco) {
			this.cocos[coco.name] = coco;
		}
	}]);

	return Palm;
}();

exports.default = Palm;